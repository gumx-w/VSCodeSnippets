{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"jsvue":{
		"scope": "vue",
		"prefix": "jsvue",
		"body": "<template></template><script lang=\"ts\">import Vue from 'vue'export default Vue.extend({})</script>",
		"description": "jsvue"
	},
	"tsvue":{
		"scope": "vue",
		"prefix": "tsvue",
		"body": "<template></template><script lang=\"ts\">import {Vue,Component} from 'vue-property-decorator'@Component export default class ComponentVue extends Vue {}</script>",
		"description": "tsvue"
	},
	"tsvue-ant-modal":{
		"scope": "vue",
		"prefix": "tsvue",
		"body": "<template><a-modal :destroyOnClose=\"true\" :centered=\"true\" okText=\"确定\" cancelText=\"取消\" wrapClassName=\"no-padding-drawer ant-modal-full-screen\" :title=\"title\" :visible=\"visible\" @ok=\"handleOk\" :confirmLoading=\"confirmLoading\" @cancel=\"handleCancel\"></template><script lang=\"ts\">import {Vue,Component} from 'vue-property-decorator'@Component export default class ComponentVue extends Vue {private visible: boolean = false;private confirmLoading: boolean = false;private title: string = '';handleOk() {this.visible = false;}handleCancel() {this.visible = false;}}</script>",
		"description": "tsvue"
	}
}